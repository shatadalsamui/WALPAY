// 1. Tells Prisma to generate a type-safe database client for your app.
// 2. Outputs the generated client to ../node_modules/@prisma/client.
// 3. Builds binaries for native and debian-openssl-3.0.x environments
generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/@prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// Database connection configuration (PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User table: stores all user info and relations
model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique
  name              String?
  number            String              @unique
  password          String
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  withdrawals       Withdrawal[]
}

// P2P transfer table: records all peer-to-peer transfers
model p2pTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserId Int
  fromUser   User     @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User     @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

// OnRampTransaction: records deposits (adding money to wallet)
model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  endTime   DateTime?
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

// Withdrawal: records money withdrawn from wallet
model Withdrawal {
  id              Int      @id @default(autoincrement())
  userId          Int
  amount          Int
  bank            String
  accountNumber   String
  token           String?  @unique @map("withdrawal_token")
  status          String   @default("PENDING") // PENDING, COMPLETED, FAILED
  bankReferenceId String? // Added to store bank's reference ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  //does indexing, makes queries faster, fetch data from db
  @@index([userId])
  @@index([status])
  @@index([bankReferenceId])
}

// Balance: tracks each user's wallet balance and locked funds
model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

enum AuthType {
  Google
  Github
}

// Enum for onramp transaction status
enum OnRampStatus {
  Success
  Failure
  Processing
}

// Otp: stores OTPs for signup/verification
model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  phone     String
  password  String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

// PasswordResetOtp: stores OTPs for password reset
model PasswordResetOtp {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  otp         String
  expiresAt   DateTime
  otpVerified Boolean  @default(false)
}
